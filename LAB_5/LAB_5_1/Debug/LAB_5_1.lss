
LAB_5_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000504  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c0  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f4  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000424  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007c  00000000  00000000  00002125  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 80 02 	jmp	0x500	; 0x500 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
*/

int main(void)
{	
	//enable keypad pull up inputs
	DDRB &= ~(1<<DDB0);
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<DDB1);
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<DDB2);
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	8b 7f       	andi	r24, 0xFB	; 251
  dc:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<DDB3);
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	84 b9       	out	0x04, r24	; 4

	PORTB |= (1<<PORTB0);
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PORTB1);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PORTB2);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PORTB3);
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	85 b9       	out	0x05, r24	; 5
	
	//enable keypad outputs
	DDRD |= (1<<DDD3);
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD4);
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	80 61       	ori	r24, 0x10	; 16
 106:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD5);
 108:	8a b1       	in	r24, 0x0a	; 10
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD6);		//skip this pin as it is physically damaged
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD7);
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	80 68       	ori	r24, 0x80	; 128
 118:	8a b9       	out	0x0a, r24	; 10
	
	//enable audio output
	DDRB |= (1<<DDB4);
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<DDB5);
 120:	84 b1       	in	r24, 0x04	; 4
 122:	80 62       	ori	r24, 0x20	; 32
 124:	84 b9       	out	0x04, r24	; 4
	
	//initialize timer and timer settings
	TCCR0A |= (1 << WGM01);		//timer mode CTC mode
 126:	84 b5       	in	r24, 0x24	; 36
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);		// set pre scale value to 256
 12c:	85 b5       	in	r24, 0x25	; 37
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	85 bd       	out	0x25, r24	; 37
	
    while (1) 
    {
		//x = scan();
		
		PORTD |= (1<<3) | (1<<4) | (1<<5) | (1<<6) | (1<<7);
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	88 6f       	ori	r24, 0xF8	; 248
 136:	8b b9       	out	0x0b, r24	; 11
		for(i = 3; i < 8 ; i++)
 138:	63 e0       	ldi	r22, 0x03	; 3
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	26 c0       	rjmp	.+76     	; 0x18a <main+0xbe>
		{
			PORTD &= ~(1<<i);
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	06 2e       	mov	r0, r22
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0x80>
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <main+0x7c>
 150:	94 2f       	mov	r25, r20
 152:	90 95       	com	r25
 154:	89 23       	and	r24, r25
 156:	8b b9       	out	0x0b, r24	; 11
			for(j = 0; j < 4; j++)
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	0e c0       	rjmp	.+28     	; 0x17a <main+0xae>
			{
				if (!(PINB & (1<<j)))
 15e:	83 b1       	in	r24, 0x03	; 3
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <main+0x9e>
 166:	95 95       	asr	r25
 168:	87 95       	ror	r24
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <main+0x9a>
 16e:	80 fd       	sbrc	r24, 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <main+0xaa>
				{
					key[0] = i;
 172:	6b 01       	movw	r12, r22
					key[1] = j;
 174:	79 01       	movw	r14, r18
		
		PORTD |= (1<<3) | (1<<4) | (1<<5) | (1<<6) | (1<<7);
		for(i = 3; i < 8 ; i++)
		{
			PORTD &= ~(1<<i);
			for(j = 0; j < 4; j++)
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	24 30       	cpi	r18, 0x04	; 4
 17c:	31 05       	cpc	r19, r1
 17e:	7c f3       	brlt	.-34     	; 0x15e <main+0x92>
				{
					key[0] = i;
					key[1] = j;
				}
			}
			PORTD |= (1<<i);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	48 2b       	or	r20, r24
 184:	4b b9       	out	0x0b, r20	; 11
    while (1) 
    {
		//x = scan();
		
		PORTD |= (1<<3) | (1<<4) | (1<<5) | (1<<6) | (1<<7);
		for(i = 3; i < 8 ; i++)
 186:	6f 5f       	subi	r22, 0xFF	; 255
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	68 30       	cpi	r22, 0x08	; 8
 18c:	71 05       	cpc	r23, r1
 18e:	bc f2       	brlt	.-82     	; 0x13e <main+0x72>
					key[1] = j;
				}
			}
			PORTD |= (1<<i);
		}
		if(key[0] == 3)
 190:	c6 01       	movw	r24, r12
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	91 05       	cpc	r25, r1
 196:	c1 f4       	brne	.+48     	; 0x1c8 <main+0xfc>
		{
			if(key[1] == 0)
 198:	c7 01       	movw	r24, r14
 19a:	00 97       	sbiw	r24, 0x00	; 0
 19c:	19 f4       	brne	.+6      	; 0x1a4 <main+0xd8>
			//x = 0;
			OCR0A = 141;
 19e:	8d e8       	ldi	r24, 0x8D	; 141
 1a0:	87 bd       	out	0x27, r24	; 39
 1a2:	5e c0       	rjmp	.+188    	; 0x260 <main+0x194>
			else if(key[1] == 1)
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	91 05       	cpc	r25, r1
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <main+0xe4>
			//x = 1;
			OCR0A = 133;
 1aa:	85 e8       	ldi	r24, 0x85	; 133
 1ac:	87 bd       	out	0x27, r24	; 39
 1ae:	58 c0       	rjmp	.+176    	; 0x260 <main+0x194>
			else if(key[1] == 2)
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	91 05       	cpc	r25, r1
 1b4:	19 f4       	brne	.+6      	; 0x1bc <main+0xf0>
			//x = 2;
			OCR0A = 126;
 1b6:	8e e7       	ldi	r24, 0x7E	; 126
 1b8:	87 bd       	out	0x27, r24	; 39
 1ba:	52 c0       	rjmp	.+164    	; 0x260 <main+0x194>
			else if(key[1] == 3)
 1bc:	03 97       	sbiw	r24, 0x03	; 3
 1be:	09 f0       	breq	.+2      	; 0x1c2 <main+0xf6>
 1c0:	4f c0       	rjmp	.+158    	; 0x260 <main+0x194>
			//x = 3;
			OCR0A = 118;
 1c2:	86 e7       	ldi	r24, 0x76	; 118
 1c4:	87 bd       	out	0x27, r24	; 39
 1c6:	4c c0       	rjmp	.+152    	; 0x260 <main+0x194>
		}
		else if(key[0] == 4)
 1c8:	84 30       	cpi	r24, 0x04	; 4
 1ca:	91 05       	cpc	r25, r1
 1cc:	b9 f4       	brne	.+46     	; 0x1fc <main+0x130>
		{
			if(key[1] == 0)
 1ce:	c7 01       	movw	r24, r14
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	19 f4       	brne	.+6      	; 0x1da <main+0x10e>
			//x = 4;
			OCR0A = 112;
 1d4:	80 e7       	ldi	r24, 0x70	; 112
 1d6:	87 bd       	out	0x27, r24	; 39
 1d8:	43 c0       	rjmp	.+134    	; 0x260 <main+0x194>
			else if(key[1] == 1)
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	91 05       	cpc	r25, r1
 1de:	19 f4       	brne	.+6      	; 0x1e6 <main+0x11a>
			//x = 5;
			OCR0A = 105;
 1e0:	89 e6       	ldi	r24, 0x69	; 105
 1e2:	87 bd       	out	0x27, r24	; 39
 1e4:	3d c0       	rjmp	.+122    	; 0x260 <main+0x194>
			else if(key[1] == 2)
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	91 05       	cpc	r25, r1
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <main+0x126>
			//x = 6;
			OCR0A = 99;
 1ec:	83 e6       	ldi	r24, 0x63	; 99
 1ee:	87 bd       	out	0x27, r24	; 39
 1f0:	37 c0       	rjmp	.+110    	; 0x260 <main+0x194>
			else if(key[1] == 3)
 1f2:	03 97       	sbiw	r24, 0x03	; 3
 1f4:	a9 f5       	brne	.+106    	; 0x260 <main+0x194>
			//x = 7;
			OCR0A = 93;
 1f6:	8d e5       	ldi	r24, 0x5D	; 93
 1f8:	87 bd       	out	0x27, r24	; 39
 1fa:	32 c0       	rjmp	.+100    	; 0x260 <main+0x194>
		}
		else if(key[0] == 5)
 1fc:	85 30       	cpi	r24, 0x05	; 5
 1fe:	91 05       	cpc	r25, r1
 200:	b9 f4       	brne	.+46     	; 0x230 <main+0x164>
		{
			if(key[1] == 0)
 202:	c7 01       	movw	r24, r14
 204:	00 97       	sbiw	r24, 0x00	; 0
 206:	19 f4       	brne	.+6      	; 0x20e <main+0x142>
			//x = 8;
			OCR0A = 88;
 208:	88 e5       	ldi	r24, 0x58	; 88
 20a:	87 bd       	out	0x27, r24	; 39
 20c:	29 c0       	rjmp	.+82     	; 0x260 <main+0x194>
			else if(key[1] == 1)
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	91 05       	cpc	r25, r1
 212:	19 f4       	brne	.+6      	; 0x21a <main+0x14e>
			//x = 9;
			OCR0A = 83;
 214:	83 e5       	ldi	r24, 0x53	; 83
 216:	87 bd       	out	0x27, r24	; 39
 218:	23 c0       	rjmp	.+70     	; 0x260 <main+0x194>
			else if(key[1] == 2)
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	91 05       	cpc	r25, r1
 21e:	19 f4       	brne	.+6      	; 0x226 <main+0x15a>
			//x = 10;
			OCR0A = 78;
 220:	8e e4       	ldi	r24, 0x4E	; 78
 222:	87 bd       	out	0x27, r24	; 39
 224:	1d c0       	rjmp	.+58     	; 0x260 <main+0x194>
			else if(key[1] == 3)
 226:	03 97       	sbiw	r24, 0x03	; 3
 228:	d9 f4       	brne	.+54     	; 0x260 <main+0x194>
			//x = 11;
			OCR0A = 74;
 22a:	8a e4       	ldi	r24, 0x4A	; 74
 22c:	87 bd       	out	0x27, r24	; 39
 22e:	18 c0       	rjmp	.+48     	; 0x260 <main+0x194>
		}
		else if(key[0] == 7)
 230:	07 97       	sbiw	r24, 0x07	; 7
 232:	b1 f4       	brne	.+44     	; 0x260 <main+0x194>
		{
			if(key[1] == 0)
 234:	c7 01       	movw	r24, r14
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	19 f4       	brne	.+6      	; 0x240 <main+0x174>
			//x= 12;
			OCR0A = 70;
 23a:	86 e4       	ldi	r24, 0x46	; 70
 23c:	87 bd       	out	0x27, r24	; 39
 23e:	10 c0       	rjmp	.+32     	; 0x260 <main+0x194>
			else if(key[1] == 1)
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	91 05       	cpc	r25, r1
 244:	19 f4       	brne	.+6      	; 0x24c <main+0x180>
			//x = 13;
			OCR0A = 66;
 246:	82 e4       	ldi	r24, 0x42	; 66
 248:	87 bd       	out	0x27, r24	; 39
 24a:	0a c0       	rjmp	.+20     	; 0x260 <main+0x194>
			else if(key[1] == 2)
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	91 05       	cpc	r25, r1
 250:	19 f4       	brne	.+6      	; 0x258 <main+0x18c>
			//x = 14;
			OCR0A = 62;
 252:	8e e3       	ldi	r24, 0x3E	; 62
 254:	87 bd       	out	0x27, r24	; 39
 256:	04 c0       	rjmp	.+8      	; 0x260 <main+0x194>
			else if(key[1] == 3)
 258:	03 97       	sbiw	r24, 0x03	; 3
 25a:	11 f4       	brne	.+4      	; 0x260 <main+0x194>
			OCR0A = 58;
 25c:	8a e3       	ldi	r24, 0x3A	; 58
 25e:	87 bd       	out	0x27, r24	; 39
		float time_period = (t_on_adjusted * 256) / 0.004096;
		int time_period_adjusted = (int)time_period;
		//OCR0A = time_period_adjusted - 1;
		OCR0B = (OCR0A * 0.5);
		*/
		OCR0B = (OCR0A * 0.5);
 260:	67 b5       	in	r22, 0x27	; 39
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 87 01 	call	0x30e	; 0x30e <__floatsisf>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	5f e3       	ldi	r21, 0x3F	; 63
 274:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__mulsf3>
 278:	0e 94 56 01 	call	0x2ac	; 0x2ac <__fixunssfsi>
 27c:	68 bd       	out	0x28, r22	; 40
		//t off
		PORTB &= ~(1<<PORTB4);
 27e:	85 b1       	in	r24, 0x05	; 5
 280:	8f 7e       	andi	r24, 0xEF	; 239
 282:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PORTB5);
 284:	85 b1       	in	r24, 0x05	; 5
 286:	8f 7d       	andi	r24, 0xDF	; 223
 288:	85 b9       	out	0x05, r24	; 5
		//busy while loop for OCR0B overflow flag
		while(!(TIFR0 & (1<<OCF0B)));
 28a:	aa 9b       	sbis	0x15, 2	; 21
 28c:	fe cf       	rjmp	.-4      	; 0x28a <main+0x1be>
		//OCR0B overflow flag reset
		TIFR0 |= (1<<OCF0B);
 28e:	85 b3       	in	r24, 0x15	; 21
 290:	84 60       	ori	r24, 0x04	; 4
 292:	85 bb       	out	0x15, r24	; 21
		
		//t on
		PORTB |= (1<<PORTB4);
 294:	85 b1       	in	r24, 0x05	; 5
 296:	80 61       	ori	r24, 0x10	; 16
 298:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PORTB5);
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	85 b9       	out	0x05, r24	; 5
		//busy while loop for OCR0A overflow flag
		while(!(TIFR0 & (1<<OCF0A)));
 2a0:	a9 9b       	sbis	0x15, 1	; 21
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <main+0x1d4>
		//OVR0A overflow flag reset
		TIFR0 |= (1<<OCF0A);	
 2a4:	85 b3       	in	r24, 0x15	; 21
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	85 bb       	out	0x15, r24	; 21
	}
 2aa:	43 cf       	rjmp	.-378    	; 0x132 <main+0x66>

000002ac <__fixunssfsi>:
 2ac:	0e 94 ca 01 	call	0x394	; 0x394 <__fp_splitA>
 2b0:	88 f0       	brcs	.+34     	; 0x2d4 <__fixunssfsi+0x28>
 2b2:	9f 57       	subi	r25, 0x7F	; 127
 2b4:	98 f0       	brcs	.+38     	; 0x2dc <__fixunssfsi+0x30>
 2b6:	b9 2f       	mov	r27, r25
 2b8:	99 27       	eor	r25, r25
 2ba:	b7 51       	subi	r27, 0x17	; 23
 2bc:	b0 f0       	brcs	.+44     	; 0x2ea <__fixunssfsi+0x3e>
 2be:	e1 f0       	breq	.+56     	; 0x2f8 <__fixunssfsi+0x4c>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	88 1f       	adc	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	1a f0       	brmi	.+6      	; 0x2d0 <__fixunssfsi+0x24>
 2ca:	ba 95       	dec	r27
 2cc:	c9 f7       	brne	.-14     	; 0x2c0 <__fixunssfsi+0x14>
 2ce:	14 c0       	rjmp	.+40     	; 0x2f8 <__fixunssfsi+0x4c>
 2d0:	b1 30       	cpi	r27, 0x01	; 1
 2d2:	91 f0       	breq	.+36     	; 0x2f8 <__fixunssfsi+0x4c>
 2d4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__fp_zero>
 2d8:	b1 e0       	ldi	r27, 0x01	; 1
 2da:	08 95       	ret
 2dc:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__fp_zero>
 2e0:	67 2f       	mov	r22, r23
 2e2:	78 2f       	mov	r23, r24
 2e4:	88 27       	eor	r24, r24
 2e6:	b8 5f       	subi	r27, 0xF8	; 248
 2e8:	39 f0       	breq	.+14     	; 0x2f8 <__fixunssfsi+0x4c>
 2ea:	b9 3f       	cpi	r27, 0xF9	; 249
 2ec:	cc f3       	brlt	.-14     	; 0x2e0 <__fixunssfsi+0x34>
 2ee:	86 95       	lsr	r24
 2f0:	77 95       	ror	r23
 2f2:	67 95       	ror	r22
 2f4:	b3 95       	inc	r27
 2f6:	d9 f7       	brne	.-10     	; 0x2ee <__fixunssfsi+0x42>
 2f8:	3e f4       	brtc	.+14     	; 0x308 <__fixunssfsi+0x5c>
 2fa:	90 95       	com	r25
 2fc:	80 95       	com	r24
 2fe:	70 95       	com	r23
 300:	61 95       	neg	r22
 302:	7f 4f       	sbci	r23, 0xFF	; 255
 304:	8f 4f       	sbci	r24, 0xFF	; 255
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	08 95       	ret

0000030a <__floatunsisf>:
 30a:	e8 94       	clt
 30c:	09 c0       	rjmp	.+18     	; 0x320 <__floatsisf+0x12>

0000030e <__floatsisf>:
 30e:	97 fb       	bst	r25, 7
 310:	3e f4       	brtc	.+14     	; 0x320 <__floatsisf+0x12>
 312:	90 95       	com	r25
 314:	80 95       	com	r24
 316:	70 95       	com	r23
 318:	61 95       	neg	r22
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	8f 4f       	sbci	r24, 0xFF	; 255
 31e:	9f 4f       	sbci	r25, 0xFF	; 255
 320:	99 23       	and	r25, r25
 322:	a9 f0       	breq	.+42     	; 0x34e <__floatsisf+0x40>
 324:	f9 2f       	mov	r31, r25
 326:	96 e9       	ldi	r25, 0x96	; 150
 328:	bb 27       	eor	r27, r27
 32a:	93 95       	inc	r25
 32c:	f6 95       	lsr	r31
 32e:	87 95       	ror	r24
 330:	77 95       	ror	r23
 332:	67 95       	ror	r22
 334:	b7 95       	ror	r27
 336:	f1 11       	cpse	r31, r1
 338:	f8 cf       	rjmp	.-16     	; 0x32a <__floatsisf+0x1c>
 33a:	fa f4       	brpl	.+62     	; 0x37a <__floatsisf+0x6c>
 33c:	bb 0f       	add	r27, r27
 33e:	11 f4       	brne	.+4      	; 0x344 <__floatsisf+0x36>
 340:	60 ff       	sbrs	r22, 0
 342:	1b c0       	rjmp	.+54     	; 0x37a <__floatsisf+0x6c>
 344:	6f 5f       	subi	r22, 0xFF	; 255
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	8f 4f       	sbci	r24, 0xFF	; 255
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	16 c0       	rjmp	.+44     	; 0x37a <__floatsisf+0x6c>
 34e:	88 23       	and	r24, r24
 350:	11 f0       	breq	.+4      	; 0x356 <__floatsisf+0x48>
 352:	96 e9       	ldi	r25, 0x96	; 150
 354:	11 c0       	rjmp	.+34     	; 0x378 <__floatsisf+0x6a>
 356:	77 23       	and	r23, r23
 358:	21 f0       	breq	.+8      	; 0x362 <__floatsisf+0x54>
 35a:	9e e8       	ldi	r25, 0x8E	; 142
 35c:	87 2f       	mov	r24, r23
 35e:	76 2f       	mov	r23, r22
 360:	05 c0       	rjmp	.+10     	; 0x36c <__floatsisf+0x5e>
 362:	66 23       	and	r22, r22
 364:	71 f0       	breq	.+28     	; 0x382 <__floatsisf+0x74>
 366:	96 e8       	ldi	r25, 0x86	; 134
 368:	86 2f       	mov	r24, r22
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	2a f0       	brmi	.+10     	; 0x37a <__floatsisf+0x6c>
 370:	9a 95       	dec	r25
 372:	66 0f       	add	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	88 1f       	adc	r24, r24
 378:	da f7       	brpl	.-10     	; 0x370 <__floatsisf+0x62>
 37a:	88 0f       	add	r24, r24
 37c:	96 95       	lsr	r25
 37e:	87 95       	ror	r24
 380:	97 f9       	bld	r25, 7
 382:	08 95       	ret

00000384 <__fp_split3>:
 384:	57 fd       	sbrc	r21, 7
 386:	90 58       	subi	r25, 0x80	; 128
 388:	44 0f       	add	r20, r20
 38a:	55 1f       	adc	r21, r21
 38c:	59 f0       	breq	.+22     	; 0x3a4 <__fp_splitA+0x10>
 38e:	5f 3f       	cpi	r21, 0xFF	; 255
 390:	71 f0       	breq	.+28     	; 0x3ae <__fp_splitA+0x1a>
 392:	47 95       	ror	r20

00000394 <__fp_splitA>:
 394:	88 0f       	add	r24, r24
 396:	97 fb       	bst	r25, 7
 398:	99 1f       	adc	r25, r25
 39a:	61 f0       	breq	.+24     	; 0x3b4 <__fp_splitA+0x20>
 39c:	9f 3f       	cpi	r25, 0xFF	; 255
 39e:	79 f0       	breq	.+30     	; 0x3be <__fp_splitA+0x2a>
 3a0:	87 95       	ror	r24
 3a2:	08 95       	ret
 3a4:	12 16       	cp	r1, r18
 3a6:	13 06       	cpc	r1, r19
 3a8:	14 06       	cpc	r1, r20
 3aa:	55 1f       	adc	r21, r21
 3ac:	f2 cf       	rjmp	.-28     	; 0x392 <__fp_split3+0xe>
 3ae:	46 95       	lsr	r20
 3b0:	f1 df       	rcall	.-30     	; 0x394 <__fp_splitA>
 3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <__fp_splitA+0x30>
 3b4:	16 16       	cp	r1, r22
 3b6:	17 06       	cpc	r1, r23
 3b8:	18 06       	cpc	r1, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	f1 cf       	rjmp	.-30     	; 0x3a0 <__fp_splitA+0xc>
 3be:	86 95       	lsr	r24
 3c0:	71 05       	cpc	r23, r1
 3c2:	61 05       	cpc	r22, r1
 3c4:	08 94       	sec
 3c6:	08 95       	ret

000003c8 <__fp_zero>:
 3c8:	e8 94       	clt

000003ca <__fp_szero>:
 3ca:	bb 27       	eor	r27, r27
 3cc:	66 27       	eor	r22, r22
 3ce:	77 27       	eor	r23, r23
 3d0:	cb 01       	movw	r24, r22
 3d2:	97 f9       	bld	r25, 7
 3d4:	08 95       	ret

000003d6 <__mulsf3>:
 3d6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__mulsf3x>
 3da:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_round>
 3de:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fp_pscA>
 3e2:	38 f0       	brcs	.+14     	; 0x3f2 <__mulsf3+0x1c>
 3e4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_pscB>
 3e8:	20 f0       	brcs	.+8      	; 0x3f2 <__mulsf3+0x1c>
 3ea:	95 23       	and	r25, r21
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <__mulsf3+0x1c>
 3ee:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_inf>
 3f2:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__fp_nan>
 3f6:	11 24       	eor	r1, r1
 3f8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__fp_szero>

000003fc <__mulsf3x>:
 3fc:	0e 94 c2 01 	call	0x384	; 0x384 <__fp_split3>
 400:	70 f3       	brcs	.-36     	; 0x3de <__mulsf3+0x8>

00000402 <__mulsf3_pse>:
 402:	95 9f       	mul	r25, r21
 404:	c1 f3       	breq	.-16     	; 0x3f6 <__mulsf3+0x20>
 406:	95 0f       	add	r25, r21
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	55 1f       	adc	r21, r21
 40c:	62 9f       	mul	r22, r18
 40e:	f0 01       	movw	r30, r0
 410:	72 9f       	mul	r23, r18
 412:	bb 27       	eor	r27, r27
 414:	f0 0d       	add	r31, r0
 416:	b1 1d       	adc	r27, r1
 418:	63 9f       	mul	r22, r19
 41a:	aa 27       	eor	r26, r26
 41c:	f0 0d       	add	r31, r0
 41e:	b1 1d       	adc	r27, r1
 420:	aa 1f       	adc	r26, r26
 422:	64 9f       	mul	r22, r20
 424:	66 27       	eor	r22, r22
 426:	b0 0d       	add	r27, r0
 428:	a1 1d       	adc	r26, r1
 42a:	66 1f       	adc	r22, r22
 42c:	82 9f       	mul	r24, r18
 42e:	22 27       	eor	r18, r18
 430:	b0 0d       	add	r27, r0
 432:	a1 1d       	adc	r26, r1
 434:	62 1f       	adc	r22, r18
 436:	73 9f       	mul	r23, r19
 438:	b0 0d       	add	r27, r0
 43a:	a1 1d       	adc	r26, r1
 43c:	62 1f       	adc	r22, r18
 43e:	83 9f       	mul	r24, r19
 440:	a0 0d       	add	r26, r0
 442:	61 1d       	adc	r22, r1
 444:	22 1f       	adc	r18, r18
 446:	74 9f       	mul	r23, r20
 448:	33 27       	eor	r19, r19
 44a:	a0 0d       	add	r26, r0
 44c:	61 1d       	adc	r22, r1
 44e:	23 1f       	adc	r18, r19
 450:	84 9f       	mul	r24, r20
 452:	60 0d       	add	r22, r0
 454:	21 1d       	adc	r18, r1
 456:	82 2f       	mov	r24, r18
 458:	76 2f       	mov	r23, r22
 45a:	6a 2f       	mov	r22, r26
 45c:	11 24       	eor	r1, r1
 45e:	9f 57       	subi	r25, 0x7F	; 127
 460:	50 40       	sbci	r21, 0x00	; 0
 462:	9a f0       	brmi	.+38     	; 0x48a <__mulsf3_pse+0x88>
 464:	f1 f0       	breq	.+60     	; 0x4a2 <__mulsf3_pse+0xa0>
 466:	88 23       	and	r24, r24
 468:	4a f0       	brmi	.+18     	; 0x47c <__mulsf3_pse+0x7a>
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	bb 1f       	adc	r27, r27
 470:	66 1f       	adc	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	91 50       	subi	r25, 0x01	; 1
 478:	50 40       	sbci	r21, 0x00	; 0
 47a:	a9 f7       	brne	.-22     	; 0x466 <__mulsf3_pse+0x64>
 47c:	9e 3f       	cpi	r25, 0xFE	; 254
 47e:	51 05       	cpc	r21, r1
 480:	80 f0       	brcs	.+32     	; 0x4a2 <__mulsf3_pse+0xa0>
 482:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_inf>
 486:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__fp_szero>
 48a:	5f 3f       	cpi	r21, 0xFF	; 255
 48c:	e4 f3       	brlt	.-8      	; 0x486 <__mulsf3_pse+0x84>
 48e:	98 3e       	cpi	r25, 0xE8	; 232
 490:	d4 f3       	brlt	.-12     	; 0x486 <__mulsf3_pse+0x84>
 492:	86 95       	lsr	r24
 494:	77 95       	ror	r23
 496:	67 95       	ror	r22
 498:	b7 95       	ror	r27
 49a:	f7 95       	ror	r31
 49c:	e7 95       	ror	r30
 49e:	9f 5f       	subi	r25, 0xFF	; 255
 4a0:	c1 f7       	brne	.-16     	; 0x492 <__mulsf3_pse+0x90>
 4a2:	fe 2b       	or	r31, r30
 4a4:	88 0f       	add	r24, r24
 4a6:	91 1d       	adc	r25, r1
 4a8:	96 95       	lsr	r25
 4aa:	87 95       	ror	r24
 4ac:	97 f9       	bld	r25, 7
 4ae:	08 95       	ret

000004b0 <__fp_inf>:
 4b0:	97 f9       	bld	r25, 7
 4b2:	9f 67       	ori	r25, 0x7F	; 127
 4b4:	80 e8       	ldi	r24, 0x80	; 128
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	08 95       	ret

000004bc <__fp_nan>:
 4bc:	9f ef       	ldi	r25, 0xFF	; 255
 4be:	80 ec       	ldi	r24, 0xC0	; 192
 4c0:	08 95       	ret

000004c2 <__fp_pscA>:
 4c2:	00 24       	eor	r0, r0
 4c4:	0a 94       	dec	r0
 4c6:	16 16       	cp	r1, r22
 4c8:	17 06       	cpc	r1, r23
 4ca:	18 06       	cpc	r1, r24
 4cc:	09 06       	cpc	r0, r25
 4ce:	08 95       	ret

000004d0 <__fp_pscB>:
 4d0:	00 24       	eor	r0, r0
 4d2:	0a 94       	dec	r0
 4d4:	12 16       	cp	r1, r18
 4d6:	13 06       	cpc	r1, r19
 4d8:	14 06       	cpc	r1, r20
 4da:	05 06       	cpc	r0, r21
 4dc:	08 95       	ret

000004de <__fp_round>:
 4de:	09 2e       	mov	r0, r25
 4e0:	03 94       	inc	r0
 4e2:	00 0c       	add	r0, r0
 4e4:	11 f4       	brne	.+4      	; 0x4ea <__fp_round+0xc>
 4e6:	88 23       	and	r24, r24
 4e8:	52 f0       	brmi	.+20     	; 0x4fe <__fp_round+0x20>
 4ea:	bb 0f       	add	r27, r27
 4ec:	40 f4       	brcc	.+16     	; 0x4fe <__fp_round+0x20>
 4ee:	bf 2b       	or	r27, r31
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__fp_round+0x18>
 4f2:	60 ff       	sbrs	r22, 0
 4f4:	04 c0       	rjmp	.+8      	; 0x4fe <__fp_round+0x20>
 4f6:	6f 5f       	subi	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	08 95       	ret

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
